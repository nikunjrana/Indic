// source: impcat.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Impcat.Citydata', null, global);
goog.exportSymbol('proto.Impcat.ISQData', null, global);
goog.exportSymbol('proto.Impcat.ImpcatRequest', null, global);
goog.exportSymbol('proto.Impcat.ImpcatResponse', null, global);
goog.exportSymbol('proto.Impcat.Mcatdata', null, global);
goog.exportSymbol('proto.Impcat.Meta_Data', null, global);
goog.exportSymbol('proto.Impcat.ParentData', null, global);
goog.exportSymbol('proto.Impcat.Productdata', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Impcat.ImpcatRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Impcat.ImpcatRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Impcat.ImpcatRequest.displayName = 'proto.Impcat.ImpcatRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Impcat.ImpcatResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Impcat.ImpcatResponse.repeatedFields_, null);
};
goog.inherits(proto.Impcat.ImpcatResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Impcat.ImpcatResponse.displayName = 'proto.Impcat.ImpcatResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Impcat.Productdata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Impcat.Productdata.repeatedFields_, null);
};
goog.inherits(proto.Impcat.Productdata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Impcat.Productdata.displayName = 'proto.Impcat.Productdata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Impcat.ISQData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Impcat.ISQData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Impcat.ISQData.displayName = 'proto.Impcat.ISQData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Impcat.ParentData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Impcat.ParentData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Impcat.ParentData.displayName = 'proto.Impcat.ParentData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Impcat.Mcatdata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Impcat.Mcatdata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Impcat.Mcatdata.displayName = 'proto.Impcat.Mcatdata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Impcat.Citydata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Impcat.Citydata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Impcat.Citydata.displayName = 'proto.Impcat.Citydata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Impcat.Meta_Data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Impcat.Meta_Data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Impcat.Meta_Data.displayName = 'proto.Impcat.Meta_Data';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Impcat.ImpcatRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.Impcat.ImpcatRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Impcat.ImpcatRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Impcat.ImpcatRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    mcatid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    modid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    cityid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    languageId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    flname: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Impcat.ImpcatRequest}
 */
proto.Impcat.ImpcatRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Impcat.ImpcatRequest;
  return proto.Impcat.ImpcatRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Impcat.ImpcatRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Impcat.ImpcatRequest}
 */
proto.Impcat.ImpcatRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMcatid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setModid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCityid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLanguageId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFlname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Impcat.ImpcatRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Impcat.ImpcatRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Impcat.ImpcatRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Impcat.ImpcatRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMcatid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getModid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCityid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getLanguageId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getFlname();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional int32 mcatid = 1;
 * @return {number}
 */
proto.Impcat.ImpcatRequest.prototype.getMcatid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Impcat.ImpcatRequest} returns this
 */
proto.Impcat.ImpcatRequest.prototype.setMcatid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string modid = 2;
 * @return {string}
 */
proto.Impcat.ImpcatRequest.prototype.getModid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.ImpcatRequest} returns this
 */
proto.Impcat.ImpcatRequest.prototype.setModid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 cityid = 3;
 * @return {number}
 */
proto.Impcat.ImpcatRequest.prototype.getCityid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Impcat.ImpcatRequest} returns this
 */
proto.Impcat.ImpcatRequest.prototype.setCityid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 language_id = 4;
 * @return {number}
 */
proto.Impcat.ImpcatRequest.prototype.getLanguageId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Impcat.ImpcatRequest} returns this
 */
proto.Impcat.ImpcatRequest.prototype.setLanguageId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string flname = 5;
 * @return {string}
 */
proto.Impcat.ImpcatRequest.prototype.getFlname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.ImpcatRequest} returns this
 */
proto.Impcat.ImpcatRequest.prototype.setFlname = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Impcat.ImpcatResponse.repeatedFields_ = [1,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Impcat.ImpcatResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.Impcat.ImpcatResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Impcat.ImpcatResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Impcat.ImpcatResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.Impcat.Productdata.toObject, includeInstance),
    ctlFlname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    parentMcat: (f = msg.getParentMcat()) && proto.Impcat.ParentData.toObject(includeInstance, f),
    mcatdataList: jspb.Message.toObjectList(msg.getMcatdataList(),
    proto.Impcat.Mcatdata.toObject, includeInstance),
    cityBarList: jspb.Message.toObjectList(msg.getCityBarList(),
    proto.Impcat.Citydata.toObject, includeInstance),
    code: jspb.Message.getFieldWithDefault(msg, 6, ""),
    mcatmetadata: (f = msg.getMcatmetadata()) && proto.Impcat.Meta_Data.toObject(includeInstance, f),
    mcatName: jspb.Message.getFieldWithDefault(msg, 8, ""),
    cityName: jspb.Message.getFieldWithDefault(msg, 9, ""),
    mcatFlname: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Impcat.ImpcatResponse}
 */
proto.Impcat.ImpcatResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Impcat.ImpcatResponse;
  return proto.Impcat.ImpcatResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Impcat.ImpcatResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Impcat.ImpcatResponse}
 */
proto.Impcat.ImpcatResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Impcat.Productdata;
      reader.readMessage(value,proto.Impcat.Productdata.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCtlFlname(value);
      break;
    case 3:
      var value = new proto.Impcat.ParentData;
      reader.readMessage(value,proto.Impcat.ParentData.deserializeBinaryFromReader);
      msg.setParentMcat(value);
      break;
    case 4:
      var value = new proto.Impcat.Mcatdata;
      reader.readMessage(value,proto.Impcat.Mcatdata.deserializeBinaryFromReader);
      msg.addMcatdata(value);
      break;
    case 5:
      var value = new proto.Impcat.Citydata;
      reader.readMessage(value,proto.Impcat.Citydata.deserializeBinaryFromReader);
      msg.addCityBar(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 7:
      var value = new proto.Impcat.Meta_Data;
      reader.readMessage(value,proto.Impcat.Meta_Data.deserializeBinaryFromReader);
      msg.setMcatmetadata(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setMcatName(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCityName(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setMcatFlname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Impcat.ImpcatResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Impcat.ImpcatResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Impcat.ImpcatResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Impcat.ImpcatResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Impcat.Productdata.serializeBinaryToWriter
    );
  }
  f = message.getCtlFlname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getParentMcat();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Impcat.ParentData.serializeBinaryToWriter
    );
  }
  f = message.getMcatdataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.Impcat.Mcatdata.serializeBinaryToWriter
    );
  }
  f = message.getCityBarList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.Impcat.Citydata.serializeBinaryToWriter
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getMcatmetadata();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.Impcat.Meta_Data.serializeBinaryToWriter
    );
  }
  f = message.getMcatName();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getCityName();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getMcatFlname();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * repeated Productdata data = 1;
 * @return {!Array<!proto.Impcat.Productdata>}
 */
proto.Impcat.ImpcatResponse.prototype.getDataList = function() {
  return /** @type{!Array<!proto.Impcat.Productdata>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Impcat.Productdata, 1));
};


/**
 * @param {!Array<!proto.Impcat.Productdata>} value
 * @return {!proto.Impcat.ImpcatResponse} returns this
*/
proto.Impcat.ImpcatResponse.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Impcat.Productdata=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Impcat.Productdata}
 */
proto.Impcat.ImpcatResponse.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Impcat.Productdata, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Impcat.ImpcatResponse} returns this
 */
proto.Impcat.ImpcatResponse.prototype.clearDataList = function() {
  return this.setDataList([]);
};


/**
 * optional string ctl_flname = 2;
 * @return {string}
 */
proto.Impcat.ImpcatResponse.prototype.getCtlFlname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.ImpcatResponse} returns this
 */
proto.Impcat.ImpcatResponse.prototype.setCtlFlname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ParentData PARENT_MCAT = 3;
 * @return {?proto.Impcat.ParentData}
 */
proto.Impcat.ImpcatResponse.prototype.getParentMcat = function() {
  return /** @type{?proto.Impcat.ParentData} */ (
    jspb.Message.getWrapperField(this, proto.Impcat.ParentData, 3));
};


/**
 * @param {?proto.Impcat.ParentData|undefined} value
 * @return {!proto.Impcat.ImpcatResponse} returns this
*/
proto.Impcat.ImpcatResponse.prototype.setParentMcat = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Impcat.ImpcatResponse} returns this
 */
proto.Impcat.ImpcatResponse.prototype.clearParentMcat = function() {
  return this.setParentMcat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Impcat.ImpcatResponse.prototype.hasParentMcat = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Mcatdata mcatdata = 4;
 * @return {!Array<!proto.Impcat.Mcatdata>}
 */
proto.Impcat.ImpcatResponse.prototype.getMcatdataList = function() {
  return /** @type{!Array<!proto.Impcat.Mcatdata>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Impcat.Mcatdata, 4));
};


/**
 * @param {!Array<!proto.Impcat.Mcatdata>} value
 * @return {!proto.Impcat.ImpcatResponse} returns this
*/
proto.Impcat.ImpcatResponse.prototype.setMcatdataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.Impcat.Mcatdata=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Impcat.Mcatdata}
 */
proto.Impcat.ImpcatResponse.prototype.addMcatdata = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Impcat.Mcatdata, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Impcat.ImpcatResponse} returns this
 */
proto.Impcat.ImpcatResponse.prototype.clearMcatdataList = function() {
  return this.setMcatdataList([]);
};


/**
 * repeated Citydata city_bar = 5;
 * @return {!Array<!proto.Impcat.Citydata>}
 */
proto.Impcat.ImpcatResponse.prototype.getCityBarList = function() {
  return /** @type{!Array<!proto.Impcat.Citydata>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Impcat.Citydata, 5));
};


/**
 * @param {!Array<!proto.Impcat.Citydata>} value
 * @return {!proto.Impcat.ImpcatResponse} returns this
*/
proto.Impcat.ImpcatResponse.prototype.setCityBarList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.Impcat.Citydata=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Impcat.Citydata}
 */
proto.Impcat.ImpcatResponse.prototype.addCityBar = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.Impcat.Citydata, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Impcat.ImpcatResponse} returns this
 */
proto.Impcat.ImpcatResponse.prototype.clearCityBarList = function() {
  return this.setCityBarList([]);
};


/**
 * optional string code = 6;
 * @return {string}
 */
proto.Impcat.ImpcatResponse.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.ImpcatResponse} returns this
 */
proto.Impcat.ImpcatResponse.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional Meta_Data McatMetaData = 7;
 * @return {?proto.Impcat.Meta_Data}
 */
proto.Impcat.ImpcatResponse.prototype.getMcatmetadata = function() {
  return /** @type{?proto.Impcat.Meta_Data} */ (
    jspb.Message.getWrapperField(this, proto.Impcat.Meta_Data, 7));
};


/**
 * @param {?proto.Impcat.Meta_Data|undefined} value
 * @return {!proto.Impcat.ImpcatResponse} returns this
*/
proto.Impcat.ImpcatResponse.prototype.setMcatmetadata = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Impcat.ImpcatResponse} returns this
 */
proto.Impcat.ImpcatResponse.prototype.clearMcatmetadata = function() {
  return this.setMcatmetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Impcat.ImpcatResponse.prototype.hasMcatmetadata = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string mcat_name = 8;
 * @return {string}
 */
proto.Impcat.ImpcatResponse.prototype.getMcatName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.ImpcatResponse} returns this
 */
proto.Impcat.ImpcatResponse.prototype.setMcatName = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string city_name = 9;
 * @return {string}
 */
proto.Impcat.ImpcatResponse.prototype.getCityName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.ImpcatResponse} returns this
 */
proto.Impcat.ImpcatResponse.prototype.setCityName = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string mcat_flname = 10;
 * @return {string}
 */
proto.Impcat.ImpcatResponse.prototype.getMcatFlname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.ImpcatResponse} returns this
 */
proto.Impcat.ImpcatResponse.prototype.setMcatFlname = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Impcat.Productdata.repeatedFields_ = [27];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Impcat.Productdata.prototype.toObject = function(opt_includeInstance) {
  return proto.Impcat.Productdata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Impcat.Productdata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Impcat.Productdata.toObject = function(includeInstance, msg) {
  var f, obj = {
    pcItemDisplayName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    prdName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pcItemSecondaryName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    pcItemUrlName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    company: jspb.Message.getFieldWithDefault(msg, 5, ""),
    companylink: jspb.Message.getFieldWithDefault(msg, 6, ""),
    searchUrl: jspb.Message.getFieldWithDefault(msg, 7, ""),
    compContct: jspb.Message.getFieldWithDefault(msg, 8, ""),
    compContctVal: jspb.Message.getFieldWithDefault(msg, 9, ""),
    catFlname: jspb.Message.getFieldWithDefault(msg, 10, ""),
    custtypeWeight1: jspb.Message.getFieldWithDefault(msg, 11, 0),
    tscode: jspb.Message.getFieldWithDefault(msg, 12, ""),
    photo125: jspb.Message.getFieldWithDefault(msg, 13, ""),
    photo250: jspb.Message.getFieldWithDefault(msg, 14, ""),
    sdaGlusrUsrLocality: jspb.Message.getFieldWithDefault(msg, 15, ""),
    city: jspb.Message.getFieldWithDefault(msg, 16, ""),
    cityOrig: jspb.Message.getFieldWithDefault(msg, 17, ""),
    district: jspb.Message.getFieldWithDefault(msg, 18, ""),
    prdPrice: jspb.Message.getFieldWithDefault(msg, 19, ""),
    standardprice: jspb.Message.getFieldWithDefault(msg, 20, ""),
    unit: jspb.Message.getFieldWithDefault(msg, 21, ""),
    dispId: jspb.Message.getFieldWithDefault(msg, 22, 0),
    glId: jspb.Message.getFieldWithDefault(msg, 23, 0),
    iilDisplayFlag: jspb.Message.getFieldWithDefault(msg, 24, 0),
    smallDesc: jspb.Message.getFieldWithDefault(msg, 25, ""),
    companyLogo: jspb.Message.getFieldWithDefault(msg, 26, ""),
    prdIsqList: jspb.Message.toObjectList(msg.getPrdIsqList(),
    proto.Impcat.ISQData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Impcat.Productdata}
 */
proto.Impcat.Productdata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Impcat.Productdata;
  return proto.Impcat.Productdata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Impcat.Productdata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Impcat.Productdata}
 */
proto.Impcat.Productdata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPcItemDisplayName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrdName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPcItemSecondaryName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPcItemUrlName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompany(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompanylink(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSearchUrl(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompContct(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompContctVal(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCatFlname(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCusttypeWeight1(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setTscode(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhoto125(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhoto250(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdaGlusrUsrLocality(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setCityOrig(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setDistrict(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrdPrice(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setStandardprice(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnit(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDispId(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGlId(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIilDisplayFlag(value);
      break;
    case 25:
      var value = /** @type {string} */ (reader.readString());
      msg.setSmallDesc(value);
      break;
    case 26:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompanyLogo(value);
      break;
    case 27:
      var value = new proto.Impcat.ISQData;
      reader.readMessage(value,proto.Impcat.ISQData.deserializeBinaryFromReader);
      msg.addPrdIsq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Impcat.Productdata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Impcat.Productdata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Impcat.Productdata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Impcat.Productdata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPcItemDisplayName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPrdName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPcItemSecondaryName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPcItemUrlName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCompany();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCompanylink();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSearchUrl();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getCompContct();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getCompContctVal();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getCatFlname();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getCusttypeWeight1();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getTscode();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getPhoto125();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getPhoto250();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getSdaGlusrUsrLocality();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getCityOrig();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getDistrict();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getPrdPrice();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getStandardprice();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getUnit();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getDispId();
  if (f !== 0) {
    writer.writeInt64(
      22,
      f
    );
  }
  f = message.getGlId();
  if (f !== 0) {
    writer.writeInt64(
      23,
      f
    );
  }
  f = message.getIilDisplayFlag();
  if (f !== 0) {
    writer.writeInt32(
      24,
      f
    );
  }
  f = message.getSmallDesc();
  if (f.length > 0) {
    writer.writeString(
      25,
      f
    );
  }
  f = message.getCompanyLogo();
  if (f.length > 0) {
    writer.writeString(
      26,
      f
    );
  }
  f = message.getPrdIsqList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      27,
      f,
      proto.Impcat.ISQData.serializeBinaryToWriter
    );
  }
};


/**
 * optional string pc_item_display_name = 1;
 * @return {string}
 */
proto.Impcat.Productdata.prototype.getPcItemDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.Productdata} returns this
 */
proto.Impcat.Productdata.prototype.setPcItemDisplayName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string prd_name = 2;
 * @return {string}
 */
proto.Impcat.Productdata.prototype.getPrdName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.Productdata} returns this
 */
proto.Impcat.Productdata.prototype.setPrdName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string pc_item_secondary_name = 3;
 * @return {string}
 */
proto.Impcat.Productdata.prototype.getPcItemSecondaryName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.Productdata} returns this
 */
proto.Impcat.Productdata.prototype.setPcItemSecondaryName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string pc_item_url_name = 4;
 * @return {string}
 */
proto.Impcat.Productdata.prototype.getPcItemUrlName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.Productdata} returns this
 */
proto.Impcat.Productdata.prototype.setPcItemUrlName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string COMPANY = 5;
 * @return {string}
 */
proto.Impcat.Productdata.prototype.getCompany = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.Productdata} returns this
 */
proto.Impcat.Productdata.prototype.setCompany = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string companylink = 6;
 * @return {string}
 */
proto.Impcat.Productdata.prototype.getCompanylink = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.Productdata} returns this
 */
proto.Impcat.Productdata.prototype.setCompanylink = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string search_url = 7;
 * @return {string}
 */
proto.Impcat.Productdata.prototype.getSearchUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.Productdata} returns this
 */
proto.Impcat.Productdata.prototype.setSearchUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string comp_contct = 8;
 * @return {string}
 */
proto.Impcat.Productdata.prototype.getCompContct = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.Productdata} returns this
 */
proto.Impcat.Productdata.prototype.setCompContct = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string comp_contct_val = 9;
 * @return {string}
 */
proto.Impcat.Productdata.prototype.getCompContctVal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.Productdata} returns this
 */
proto.Impcat.Productdata.prototype.setCompContctVal = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string cat_flname = 10;
 * @return {string}
 */
proto.Impcat.Productdata.prototype.getCatFlname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.Productdata} returns this
 */
proto.Impcat.Productdata.prototype.setCatFlname = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int32 CUSTTYPE_WEIGHT1 = 11;
 * @return {number}
 */
proto.Impcat.Productdata.prototype.getCusttypeWeight1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.Impcat.Productdata} returns this
 */
proto.Impcat.Productdata.prototype.setCusttypeWeight1 = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional string tscode = 12;
 * @return {string}
 */
proto.Impcat.Productdata.prototype.getTscode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.Productdata} returns this
 */
proto.Impcat.Productdata.prototype.setTscode = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string photo_125 = 13;
 * @return {string}
 */
proto.Impcat.Productdata.prototype.getPhoto125 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.Productdata} returns this
 */
proto.Impcat.Productdata.prototype.setPhoto125 = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string photo_250 = 14;
 * @return {string}
 */
proto.Impcat.Productdata.prototype.getPhoto250 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.Productdata} returns this
 */
proto.Impcat.Productdata.prototype.setPhoto250 = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string SDA_GLUSR_USR_LOCALITY = 15;
 * @return {string}
 */
proto.Impcat.Productdata.prototype.getSdaGlusrUsrLocality = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.Productdata} returns this
 */
proto.Impcat.Productdata.prototype.setSdaGlusrUsrLocality = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string city = 16;
 * @return {string}
 */
proto.Impcat.Productdata.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.Productdata} returns this
 */
proto.Impcat.Productdata.prototype.setCity = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string city_orig = 17;
 * @return {string}
 */
proto.Impcat.Productdata.prototype.getCityOrig = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.Productdata} returns this
 */
proto.Impcat.Productdata.prototype.setCityOrig = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional string district = 18;
 * @return {string}
 */
proto.Impcat.Productdata.prototype.getDistrict = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.Productdata} returns this
 */
proto.Impcat.Productdata.prototype.setDistrict = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional string prd_price = 19;
 * @return {string}
 */
proto.Impcat.Productdata.prototype.getPrdPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.Productdata} returns this
 */
proto.Impcat.Productdata.prototype.setPrdPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 19, value);
};


/**
 * optional string standardPrice = 20;
 * @return {string}
 */
proto.Impcat.Productdata.prototype.getStandardprice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.Productdata} returns this
 */
proto.Impcat.Productdata.prototype.setStandardprice = function(value) {
  return jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional string unit = 21;
 * @return {string}
 */
proto.Impcat.Productdata.prototype.getUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.Productdata} returns this
 */
proto.Impcat.Productdata.prototype.setUnit = function(value) {
  return jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional int64 disp_id = 22;
 * @return {number}
 */
proto.Impcat.Productdata.prototype.getDispId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/**
 * @param {number} value
 * @return {!proto.Impcat.Productdata} returns this
 */
proto.Impcat.Productdata.prototype.setDispId = function(value) {
  return jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional int64 gl_id = 23;
 * @return {number}
 */
proto.Impcat.Productdata.prototype.getGlId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {number} value
 * @return {!proto.Impcat.Productdata} returns this
 */
proto.Impcat.Productdata.prototype.setGlId = function(value) {
  return jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional int32 iil_display_flag = 24;
 * @return {number}
 */
proto.Impcat.Productdata.prototype.getIilDisplayFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/**
 * @param {number} value
 * @return {!proto.Impcat.Productdata} returns this
 */
proto.Impcat.Productdata.prototype.setIilDisplayFlag = function(value) {
  return jspb.Message.setProto3IntField(this, 24, value);
};


/**
 * optional string small_desc = 25;
 * @return {string}
 */
proto.Impcat.Productdata.prototype.getSmallDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 25, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.Productdata} returns this
 */
proto.Impcat.Productdata.prototype.setSmallDesc = function(value) {
  return jspb.Message.setProto3StringField(this, 25, value);
};


/**
 * optional string company_logo = 26;
 * @return {string}
 */
proto.Impcat.Productdata.prototype.getCompanyLogo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 26, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.Productdata} returns this
 */
proto.Impcat.Productdata.prototype.setCompanyLogo = function(value) {
  return jspb.Message.setProto3StringField(this, 26, value);
};


/**
 * repeated ISQData prd_isq = 27;
 * @return {!Array<!proto.Impcat.ISQData>}
 */
proto.Impcat.Productdata.prototype.getPrdIsqList = function() {
  return /** @type{!Array<!proto.Impcat.ISQData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Impcat.ISQData, 27));
};


/**
 * @param {!Array<!proto.Impcat.ISQData>} value
 * @return {!proto.Impcat.Productdata} returns this
*/
proto.Impcat.Productdata.prototype.setPrdIsqList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 27, value);
};


/**
 * @param {!proto.Impcat.ISQData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Impcat.ISQData}
 */
proto.Impcat.Productdata.prototype.addPrdIsq = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 27, opt_value, proto.Impcat.ISQData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Impcat.Productdata} returns this
 */
proto.Impcat.Productdata.prototype.clearPrdIsqList = function() {
  return this.setPrdIsqList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Impcat.ISQData.prototype.toObject = function(opt_includeInstance) {
  return proto.Impcat.ISQData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Impcat.ISQData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Impcat.ISQData.toObject = function(includeInstance, msg) {
  var f, obj = {
    masterDesc: jspb.Message.getFieldWithDefault(msg, 1, ""),
    optionsDesc: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Impcat.ISQData}
 */
proto.Impcat.ISQData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Impcat.ISQData;
  return proto.Impcat.ISQData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Impcat.ISQData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Impcat.ISQData}
 */
proto.Impcat.ISQData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMasterDesc(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOptionsDesc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Impcat.ISQData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Impcat.ISQData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Impcat.ISQData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Impcat.ISQData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMasterDesc();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOptionsDesc();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string MASTER_DESC = 1;
 * @return {string}
 */
proto.Impcat.ISQData.prototype.getMasterDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.ISQData} returns this
 */
proto.Impcat.ISQData.prototype.setMasterDesc = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string OPTIONS_DESC = 2;
 * @return {string}
 */
proto.Impcat.ISQData.prototype.getOptionsDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.ISQData} returns this
 */
proto.Impcat.ISQData.prototype.setOptionsDesc = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Impcat.ParentData.prototype.toObject = function(opt_includeInstance) {
  return proto.Impcat.ParentData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Impcat.ParentData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Impcat.ParentData.toObject = function(includeInstance, msg) {
  var f, obj = {
    glcatMcatId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    glcatMcatFlname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    glcatMcatName: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Impcat.ParentData}
 */
proto.Impcat.ParentData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Impcat.ParentData;
  return proto.Impcat.ParentData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Impcat.ParentData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Impcat.ParentData}
 */
proto.Impcat.ParentData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGlcatMcatId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGlcatMcatFlname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGlcatMcatName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Impcat.ParentData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Impcat.ParentData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Impcat.ParentData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Impcat.ParentData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGlcatMcatId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getGlcatMcatFlname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGlcatMcatName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 glcat_mcat_id = 1;
 * @return {number}
 */
proto.Impcat.ParentData.prototype.getGlcatMcatId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Impcat.ParentData} returns this
 */
proto.Impcat.ParentData.prototype.setGlcatMcatId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string glcat_mcat_flname = 2;
 * @return {string}
 */
proto.Impcat.ParentData.prototype.getGlcatMcatFlname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.ParentData} returns this
 */
proto.Impcat.ParentData.prototype.setGlcatMcatFlname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string glcat_mcat_name = 3;
 * @return {string}
 */
proto.Impcat.ParentData.prototype.getGlcatMcatName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.ParentData} returns this
 */
proto.Impcat.ParentData.prototype.setGlcatMcatName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Impcat.Mcatdata.prototype.toObject = function(opt_includeInstance) {
  return proto.Impcat.Mcatdata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Impcat.Mcatdata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Impcat.Mcatdata.toObject = function(includeInstance, msg) {
  var f, obj = {
    relTypeFlag: jspb.Message.getFieldWithDefault(msg, 1, 0),
    glCityFlname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    glcatMcatFlname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    glCityName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    glcatMcatNameSecondary: jspb.Message.getFieldWithDefault(msg, 5, ""),
    glcatMcatName: jspb.Message.getFieldWithDefault(msg, 6, ""),
    glcatMcatImg1125x125: jspb.Message.getFieldWithDefault(msg, 7, ""),
    glcatMcatId: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Impcat.Mcatdata}
 */
proto.Impcat.Mcatdata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Impcat.Mcatdata;
  return proto.Impcat.Mcatdata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Impcat.Mcatdata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Impcat.Mcatdata}
 */
proto.Impcat.Mcatdata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRelTypeFlag(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGlCityFlname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGlcatMcatFlname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGlCityName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setGlcatMcatNameSecondary(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setGlcatMcatName(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setGlcatMcatImg1125x125(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGlcatMcatId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Impcat.Mcatdata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Impcat.Mcatdata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Impcat.Mcatdata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Impcat.Mcatdata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRelTypeFlag();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getGlCityFlname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGlcatMcatFlname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGlCityName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getGlcatMcatNameSecondary();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getGlcatMcatName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getGlcatMcatImg1125x125();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getGlcatMcatId();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
};


/**
 * optional int32 REL_TYPE_FLAG = 1;
 * @return {number}
 */
proto.Impcat.Mcatdata.prototype.getRelTypeFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Impcat.Mcatdata} returns this
 */
proto.Impcat.Mcatdata.prototype.setRelTypeFlag = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string GL_CITY_FLNAME = 2;
 * @return {string}
 */
proto.Impcat.Mcatdata.prototype.getGlCityFlname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.Mcatdata} returns this
 */
proto.Impcat.Mcatdata.prototype.setGlCityFlname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string GLCAT_MCAT_FLNAME = 3;
 * @return {string}
 */
proto.Impcat.Mcatdata.prototype.getGlcatMcatFlname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.Mcatdata} returns this
 */
proto.Impcat.Mcatdata.prototype.setGlcatMcatFlname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string GL_CITY_NAME = 4;
 * @return {string}
 */
proto.Impcat.Mcatdata.prototype.getGlCityName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.Mcatdata} returns this
 */
proto.Impcat.Mcatdata.prototype.setGlCityName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string GLCAT_MCAT_NAME_SECONDARY = 5;
 * @return {string}
 */
proto.Impcat.Mcatdata.prototype.getGlcatMcatNameSecondary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.Mcatdata} returns this
 */
proto.Impcat.Mcatdata.prototype.setGlcatMcatNameSecondary = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string GLCAT_MCAT_NAME = 6;
 * @return {string}
 */
proto.Impcat.Mcatdata.prototype.getGlcatMcatName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.Mcatdata} returns this
 */
proto.Impcat.Mcatdata.prototype.setGlcatMcatName = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string GLCAT_MCAT_IMG1_125X125 = 7;
 * @return {string}
 */
proto.Impcat.Mcatdata.prototype.getGlcatMcatImg1125x125 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.Mcatdata} returns this
 */
proto.Impcat.Mcatdata.prototype.setGlcatMcatImg1125x125 = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int32 GLCAT_MCAT_ID = 8;
 * @return {number}
 */
proto.Impcat.Mcatdata.prototype.getGlcatMcatId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.Impcat.Mcatdata} returns this
 */
proto.Impcat.Mcatdata.prototype.setGlcatMcatId = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Impcat.Citydata.prototype.toObject = function(opt_includeInstance) {
  return proto.Impcat.Citydata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Impcat.Citydata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Impcat.Citydata.toObject = function(includeInstance, msg) {
  var f, obj = {
    prdSearchCity: jspb.Message.getFieldWithDefault(msg, 1, ""),
    prdSearchCitySecondary: jspb.Message.getFieldWithDefault(msg, 2, ""),
    glCityFlname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    glCityId: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Impcat.Citydata}
 */
proto.Impcat.Citydata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Impcat.Citydata;
  return proto.Impcat.Citydata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Impcat.Citydata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Impcat.Citydata}
 */
proto.Impcat.Citydata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrdSearchCity(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrdSearchCitySecondary(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGlCityFlname(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGlCityId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Impcat.Citydata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Impcat.Citydata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Impcat.Citydata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Impcat.Citydata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrdSearchCity();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPrdSearchCitySecondary();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGlCityFlname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGlCityId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string PRD_SEARCH_CITY = 1;
 * @return {string}
 */
proto.Impcat.Citydata.prototype.getPrdSearchCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.Citydata} returns this
 */
proto.Impcat.Citydata.prototype.setPrdSearchCity = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string PRD_SEARCH_CITY_SECONDARY = 2;
 * @return {string}
 */
proto.Impcat.Citydata.prototype.getPrdSearchCitySecondary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.Citydata} returns this
 */
proto.Impcat.Citydata.prototype.setPrdSearchCitySecondary = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string GL_CITY_FLNAME = 3;
 * @return {string}
 */
proto.Impcat.Citydata.prototype.getGlCityFlname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.Citydata} returns this
 */
proto.Impcat.Citydata.prototype.setGlCityFlname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 GL_CITY_ID = 4;
 * @return {number}
 */
proto.Impcat.Citydata.prototype.getGlCityId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Impcat.Citydata} returns this
 */
proto.Impcat.Citydata.prototype.setGlCityId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Impcat.Meta_Data.prototype.toObject = function(opt_includeInstance) {
  return proto.Impcat.Meta_Data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Impcat.Meta_Data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Impcat.Meta_Data.toObject = function(includeInstance, msg) {
  var f, obj = {
    bucket: jspb.Message.getFieldWithDefault(msg, 1, ""),
    order: jspb.Message.getFieldWithDefault(msg, 2, 0),
    title: jspb.Message.getFieldWithDefault(msg, 3, ""),
    desc: jspb.Message.getFieldWithDefault(msg, 4, ""),
    keyword: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Impcat.Meta_Data}
 */
proto.Impcat.Meta_Data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Impcat.Meta_Data;
  return proto.Impcat.Meta_Data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Impcat.Meta_Data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Impcat.Meta_Data}
 */
proto.Impcat.Meta_Data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBucket(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOrder(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Impcat.Meta_Data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Impcat.Meta_Data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Impcat.Meta_Data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Impcat.Meta_Data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBucket();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOrder();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDesc();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getKeyword();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string bucket = 1;
 * @return {string}
 */
proto.Impcat.Meta_Data.prototype.getBucket = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.Meta_Data} returns this
 */
proto.Impcat.Meta_Data.prototype.setBucket = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 order = 2;
 * @return {number}
 */
proto.Impcat.Meta_Data.prototype.getOrder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Impcat.Meta_Data} returns this
 */
proto.Impcat.Meta_Data.prototype.setOrder = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string title = 3;
 * @return {string}
 */
proto.Impcat.Meta_Data.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.Meta_Data} returns this
 */
proto.Impcat.Meta_Data.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string desc = 4;
 * @return {string}
 */
proto.Impcat.Meta_Data.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.Meta_Data} returns this
 */
proto.Impcat.Meta_Data.prototype.setDesc = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string keyword = 5;
 * @return {string}
 */
proto.Impcat.Meta_Data.prototype.getKeyword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Impcat.Meta_Data} returns this
 */
proto.Impcat.Meta_Data.prototype.setKeyword = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


goog.object.extend(exports, proto.Impcat);
